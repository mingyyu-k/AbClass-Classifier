import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
from lightgbm import LGBMClassifier

# Load your data
data = pd.read_csv("file_path")
data.drop("V1", axis=1, inplace=True)

# Make sure numeric columns are actually numeric
numeric_columns = data.columns[1:]
data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with missing values
data.dropna(inplace=True)

# Encode label column
label_encoder = LabelEncoder()
data['label'] = label_encoder.fit_transform(data['label'].astype(str))

# Define features and labels
X = data.drop('label', axis=1).values
y = data['label'].values

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define LGBM model
lgbm_model = LGBMClassifier(boosting_type='gbdt',
                            num_leaves=31,
                            max_depth=-1,
                            learning_rate=0.1,
                            n_estimators=500,
                            feature_fraction=0.9,
                            bagging_fraction=0.8,
                            bagging_freq=5,
                            verbose=0,
                            objective='binary',
                            random_state=42,
                            n_jobs=-1,
                            importance_type='split')

# Perform 5-fold cross-validation on the training data
cv_scores = cross_val_score(lgbm_model, X_train_scaled, y_train, cv=5)
print("Cross-validation scores:", cv_scores)
print("Mean CV accuracy:", np.mean(cv_scores))

# Train LGBM model with training set
lgbm_model.fit(X_train_scaled, y_train)

# Evaluate on training set
y_train_pred = lgbm_model.predict(X_train_scaled)
train_accuracy = accuracy_score(y_train, y_train_pred)
print("Training Accuracy:", train_accuracy)

print("Training Classification Report:")
print(classification_report(y_train, y_train_pred))

# Evaluate on test set
y_test_pred = lgbm_model.predict(X_test_scaled)
test_accuracy = accuracy_score(y_test, y_test_pred)
print("Test Accuracy:", test_accuracy)

print("Test Classification Report:")
print(classification_report(y_test, y_test_pred))
